% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/join-rel.R
\name{substrait_join}
\alias{substrait_join}
\alias{join_name_repair_none}
\alias{join_name_repair_suffix_common}
\alias{join_emit_all}
\alias{join_emit_default}
\title{Append a Substrait Join relation}
\usage{
substrait_join(
  compiler_left,
  compiler_right,
  by = NULL,
  type = "JOIN_TYPE_INNER",
  name_repair_func = join_name_repair_suffix_common(),
  output_mapping_func = join_emit_all()
)

join_name_repair_none()

join_name_repair_suffix_common(suffix = c(".x", ".y"))

join_emit_all()

join_emit_default()
}
\arguments{
\item{compiler_left, compiler_right}{A \code{\link[=substrait_compiler]{substrait_compiler()}} or table-like
object to use as inputs to the join relation. Currently only one of
these can be a \code{\link[=substrait_compiler]{substrait_compiler()}}.}

\item{by}{A join specifiation. Join specifications that are currently
supported include a character vector of column names whose optional
names indicate the name on \code{compiler_left} (e.g., \code{"common_name"} or
\code{c("name_left" = "name_right")}).}

\item{type}{One of "JOIN_TYPE_INNER", "JOIN_TYPE_OUTER", "JOIN_TYPE_LEFT",
"JOIN_TYPE_RIGHT", "JOIN_TYPE_SEMI", "JOIN_TYPE_ANTI", or "JOIN_TYPE_SINGLE".}

\item{name_repair_func}{A function of \code{output_mapping}, \code{names_left}, and
\code{names_right} used to calculate the output names (e.g.,
\code{\link[=join_name_repair_suffix_common]{join_name_repair_suffix_common()}} or \code{\link[=join_name_repair_none]{join_name_repair_none()}}).}

\item{output_mapping_func}{A function of \code{by}, \code{names_left}, and \code{names_right}
used to calculate the zero-based indices of the output to include (e.g.,
\code{\link[=join_emit_all]{join_emit_all()}} or \code{\link[=join_emit_default]{join_emit_default()}}).}

\item{suffix}{A length 2 character vector of suffixes to use to
disambiguate columns from the left and right inputs whose name would
be duplicated in the output.}
}
\value{
A modified compiler.
}
\description{
Append a Substrait Join relation
}
\examples{
\dontshow{if (has_duckdb_with_substrait()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
left <- tibble::tibble(number = 1:3, letter = c("a", "b", "c"))
right <- tibble::tibble(number = 2:4, LETTER = c("B", "C", "D"))

# Default join keeps all columns
joined <- substrait_join(
  duckdb_substrait_compiler(left),
  right
)
joined$schema$names

# Use output_mapping_func to change the default output
joined <- substrait_join(
  duckdb_substrait_compiler(left),
  right,
  output_mapping_func = join_emit_default()
)
joined$schema$names
\dontshow{\}) # examplesIf}
}
