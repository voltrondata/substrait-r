% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pkg-dplyr.R
\name{select.SubstraitCompiler}
\alias{select.SubstraitCompiler}
\alias{rename.SubstraitCompiler}
\alias{filter.SubstraitCompiler}
\alias{mutate.SubstraitCompiler}
\alias{transmute.SubstraitCompiler}
\alias{arrange.SubstraitCompiler}
\alias{group_by.SubstraitCompiler}
\alias{ungroup.SubstraitCompiler}
\alias{summarise.SubstraitCompiler}
\alias{collect.SubstraitCompiler}
\title{dplyr verb implementations}
\usage{
\method{select}{SubstraitCompiler}(.data, ...)

\method{rename}{SubstraitCompiler}(.data, ...)

\method{filter}{SubstraitCompiler}(.data, ...)

\method{mutate}{SubstraitCompiler}(.data, ...)

\method{transmute}{SubstraitCompiler}(.data, ...)

\method{arrange}{SubstraitCompiler}(.data, ...)

\method{group_by}{SubstraitCompiler}(.data, ..., .add = FALSE, .drop = NULL)

\method{ungroup}{SubstraitCompiler}(x, ...)

\method{summarise}{SubstraitCompiler}(.data, ..., .groups = NULL)

\method{collect}{SubstraitCompiler}(x, ...)
}
\arguments{
\item{.data, x}{A \code{\link[=substrait_compiler]{substrait_compiler()}}}

\item{...}{\itemize{
\item \code{select()}: see \code{\link[dplyr:select]{dplyr::select()}}
\itemize{
\item \code{rename()}: see \code{\link[dplyr:rename]{dplyr::rename()}}
\item \code{filter()}: see \code{\link[dplyr:filter]{dplyr::filter()}}
\item \code{mutate()}: see \code{\link[dplyr:mutate]{dplyr::mutate()}}
\item \code{arrange()}: see \code{\link[dplyr:arrange]{dplyr::arrange()}}
}
}}

\item{.add}{When \code{FALSE}, the default, \code{group_by()} will
override existing groups. To add to the existing groups, use
\code{.add = TRUE}.

This argument was previously called \code{add}, but that prevented
creating a new grouping variable called \code{add}, and conflicts with
our naming conventions.}

\item{.drop}{Not supported, see \code{\link[dplyr:group_by]{dplyr::group_by()}}}

\item{.groups}{\ifelse{{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}} Grouping structure of the result.
\itemize{
\item "drop_last": dropping the last level of grouping. This was the
only supported option before version 1.0.0.
\item "drop": All levels of grouping are dropped.
\item "keep": Same grouping structure as \code{.data}.
\item "rowwise": Each row is its own group.
}

When \code{.groups} is not specified, it is chosen
based on the number of rows of the results:
\itemize{
\item If all the results have 1 row, you get "drop_last".
\item If the number of rows varies, you get "keep".
}

In addition, a message informs you of that choice, unless the result is ungrouped,
the option "dplyr.summarise.inform" is set to \code{FALSE},
or when \code{summarise()} is called from a function in a package.}
}
\value{
A modified \code{\link[=substrait_compiler]{substrait_compiler()}}
}
\description{
dplyr verb implementations
}
\examples{
\dontshow{if (requireNamespace("dplyr", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
compiler <- substrait_compiler(mtcars)
dplyr::select(compiler, mpg2 = mpg)
dplyr::rename(compiler, mpg2 = mpg)
dplyr::filter(compiler, mpg > 20)
dplyr::mutate(compiler, mpg + 10)
dplyr::transmute(compiler, mpg + 10)
dplyr::arrange(compiler, desc(mpg))
\dontshow{\}) # examplesIf}
}
