% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pkg-dplyr.R
\name{select.SubstraitCompiler}
\alias{select.SubstraitCompiler}
\alias{rename.SubstraitCompiler}
\alias{rename_with.SubstraitCompiler}
\alias{filter.SubstraitCompiler}
\alias{mutate.SubstraitCompiler}
\alias{transmute.SubstraitCompiler}
\alias{arrange.SubstraitCompiler}
\alias{group_by.SubstraitCompiler}
\alias{ungroup.SubstraitCompiler}
\alias{summarise.SubstraitCompiler}
\alias{summarize.SubstraitCompiler}
\alias{collect.SubstraitCompiler}
\alias{relocate.SubstraitCompiler}
\alias{inner_join.SubstraitCompiler}
\title{dplyr verb implementations}
\usage{
\method{select}{SubstraitCompiler}(.data, ...)

\method{rename}{SubstraitCompiler}(.data, ...)

\method{rename_with}{SubstraitCompiler}(.data, .fn, .cols = dplyr::everything(), ...)

\method{filter}{SubstraitCompiler}(.data, ...)

\method{mutate}{SubstraitCompiler}(.data, ..., .keep = c("all", "used", "unused", "none"))

\method{transmute}{SubstraitCompiler}(.data, ...)

\method{arrange}{SubstraitCompiler}(.data, ..., .by_group = FALSE)

\method{group_by}{SubstraitCompiler}(.data, ..., .add = FALSE, .drop = NULL)

\method{ungroup}{SubstraitCompiler}(x, ...)

\method{summarise}{SubstraitCompiler}(.data, ..., .groups = NULL)

\method{summarize}{SubstraitCompiler}(.data, ..., .groups = NULL)

\method{collect}{SubstraitCompiler}(x, ...)

\method{relocate}{SubstraitCompiler}(.data, ..., .before = NULL, .after = NULL)

\method{inner_join}{SubstraitCompiler}(x, y, by = NULL, suffix = c(".x", ".y"), ..., keep = NULL)
}
\arguments{
\item{.data, x, y}{A \code{\link[=substrait_compiler]{substrait_compiler()}}}

\item{...}{\itemize{
\item \code{select()}: see \code{\link[dplyr:select]{dplyr::select()}}
\itemize{
\item \code{rename()}: see \code{\link[dplyr:rename]{dplyr::rename()}}
\item \code{filter()}: see \code{\link[dplyr:filter]{dplyr::filter()}}
\item \code{mutate()}: see \code{\link[dplyr:mutate]{dplyr::mutate()}}
\item \code{arrange()}: see \code{\link[dplyr:arrange]{dplyr::arrange()}}
}
}}

\item{.fn}{Function to transform selected \code{.cols}; see\code{\link[dplyr:rename]{dplyr::rename_with()}}}

\item{.cols}{Columns to rename; see\code{\link[dplyr:rename]{dplyr::rename_with()}}}

\item{.keep}{Which columns are retained in output; see \code{\link[dplyr:mutate]{dplyr::mutate()}}}

\item{.by_group}{sort by grouping variable? see\code{\link[dplyr:arrange]{dplyr::arrange()}}}

\item{.add}{Use \code{TRUE} to add the groupings to the current groupings and
\code{FALSE} to reset the grouping.}

\item{.drop}{Not supported, see \code{\link[dplyr:group_by]{dplyr::group_by()}}}

\item{.groups}{One of "drop_last", "drop", or "keep"
(see \code{\link[dplyr:summarise]{dplyr::summarise()}}).}

\item{.before}{Destination of columns to move; see \code{\link[dplyr:relocate]{dplyr::relocate()}}}

\item{.after}{Destination of columns to move; see \code{\link[dplyr:relocate]{dplyr::relocate()}}}

\item{by}{For joins, a join specifier or \code{NULL} to use common variables
across \code{x} and \code{y}; see \code{\link[dplyr:mutate-joins]{dplyr::inner_join()}}.}

\item{suffix}{A suffix used to disambiguate columns from \code{x} and \code{y} if a
join would result in duplicate column names.}

\item{keep}{For joins, use \code{TRUE} to keep all output columns;
see \code{\link[dplyr:mutate-joins]{dplyr::inner_join()}}.}
}
\value{
A modified \code{\link[=substrait_compiler]{substrait_compiler()}}
}
\description{
dplyr verb implementations
}
\examples{
\dontshow{if (has_duckdb_with_substrait()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
library(dplyr)
compiler <- duckdb_substrait_compiler(mtcars)

select(compiler, mpg2 = mpg) \%>\% collect()
rename(compiler, mpg2 = mpg) \%>\% collect()
filter(compiler, mpg > 20) \%>\% collect()
mutate(compiler, mpg + 10) \%>\% collect()
transmute(compiler, mpg + 10) \%>\% collect()
arrange(compiler, desc(mpg)) \%>\% collect()
\dontshow{\}) # examplesIf}
}
