% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pkg-dplyr.R
\name{select.SubstraitCompiler}
\alias{select.SubstraitCompiler}
\alias{rename.SubstraitCompiler}
\alias{filter.SubstraitCompiler}
\alias{mutate.SubstraitCompiler}
\alias{transmute.SubstraitCompiler}
\alias{arrange.SubstraitCompiler}
\alias{group_by.SubstraitCompiler}
\alias{ungroup.SubstraitCompiler}
\alias{summarise.SubstraitCompiler}
\alias{collect.SubstraitCompiler}
\title{dplyr verb implementations}
\usage{
\method{select}{SubstraitCompiler}(.data, ...)

\method{rename}{SubstraitCompiler}(.data, ...)

\method{filter}{SubstraitCompiler}(.data, ...)

\method{mutate}{SubstraitCompiler}(.data, ...)

\method{transmute}{SubstraitCompiler}(.data, ...)

\method{arrange}{SubstraitCompiler}(.data, ...)

\method{group_by}{SubstraitCompiler}(.data, ..., .add = FALSE, .drop = NULL)

\method{ungroup}{SubstraitCompiler}(x, ...)

\method{summarise}{SubstraitCompiler}(.data, ..., .groups = NULL)

\method{collect}{SubstraitCompiler}(x, ...)
}
\arguments{
\item{.data, x}{A \code{\link[=substrait_compiler]{substrait_compiler()}}}

\item{...}{\itemize{
\item \code{select()}: see \code{\link[dplyr:select]{dplyr::select()}}
\itemize{
\item \code{rename()}: see \code{\link[dplyr:rename]{dplyr::rename()}}
\item \code{filter()}: see \code{\link[dplyr:filter]{dplyr::filter()}}
\item \code{mutate()}: see \code{\link[dplyr:mutate]{dplyr::mutate()}}
\item \code{arrange()}: see \code{\link[dplyr:arrange]{dplyr::arrange()}}
}
}}

\item{.add}{Use \code{TRUE} to add the groupings to the current groupings and
\code{FALSE} to reset the grouping.}

\item{.drop}{Not supported, see \code{\link[dplyr:group_by]{dplyr::group_by()}}}

\item{.groups}{One of "drop_last", "drop", or "keep"
(see \code{\link[dplyr:summarise]{dplyr::summarise()}}).}
}
\value{
A modified \code{\link[=substrait_compiler]{substrait_compiler()}}
}
\description{
dplyr verb implementations
}
\examples{
\dontshow{if (requireNamespace("dplyr", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
compiler <- substrait_compiler(mtcars)
dplyr::select(compiler, mpg2 = mpg)
dplyr::rename(compiler, mpg2 = mpg)
dplyr::filter(compiler, mpg > 20)
dplyr::mutate(compiler, mpg + 10)
dplyr::transmute(compiler, mpg + 10)
dplyr::arrange(compiler, desc(mpg))
\dontshow{\}) # examplesIf}
}
