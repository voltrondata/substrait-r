% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compiler.R
\name{substrait_call}
\alias{substrait_call}
\alias{substrait_call_agg}
\alias{substrait_eval}
\alias{substrait_eval_data}
\title{Translation utilities}
\usage{
substrait_call(.fun, ..., .output_type = NULL)

substrait_call_agg(.fun, ..., .output_type = NULL)

substrait_eval(expr)

substrait_eval_data(expr)
}
\arguments{
\item{.fun}{The name of a substrait function as a string that will
be passed on to the consumer. The function will be registered with
the compiler and assigned a new identifier if it has not already been
used.}

\item{...}{Function arguments. These will be coerced to a substrait.Expression
if they have not been already. Translation functions should take care to
handle R objects that do not readily translate into substrait types
via \code{as_substrait(x, "substrait.Expression")} before passing them to
\code{substrait_call()} or \code{substrait_call_agg()}.}

\item{.output_type}{The output type of the call. In the future this may
be built in to the compiler since in theory the compiler should be able
to predict this.}

\item{expr}{An expression to evaluate with the translations defined by
the current compiler. You can use this to define translations that use
other translations in a more readable way. You can use tidy evaluation
within \code{expr}, including unquoting (\verb{!!}), \code{.data$some_column}, to access
a column explicitly, and \code{.fns$some_function()} to access a translation
explicitly.}
}
\value{
All of these functions return an object that can be coerced
to a substrait.Expression via \code{as_substrait(x, "substrait.Expression")}.
}
\description{
These functions are used to translate R function calls into Substrait
expressions that can be passed on to a consumer, compiled, and evaluated
there. Use \code{\link[=substrait_call]{substrait_call()}} to generate a substrait.Expression.ScalarFunction
based on a function name and a series of arguments; use \code{\link[=substrait_eval]{substrait_eval()}}
to translate R code using Substrait function translations where possible;
and use \code{\link[=substrait_eval_data]{substrait_eval_data()}} translate R code using Substrait function
translations \emph{and} the \code{.data} mask from the \code{\link[=current_compiler]{current_compiler()}}.
}
\examples{
# create a compiler
compiler <- substrait_compiler(data.frame(a = 1, b = 2))

# usually functions are defined in internal package code,
# but you can also define them for testing like this:
compiler$.fns$sqrt <- function(x) {
  substrait_call("sqrt", x, .output_type = substrait_fp64())
}

# substrait_eval() does not have access to column names
try(with_compiler(compiler, substrait_eval(b)))

# ..but does have access to functions
with_compiler(compiler, substrait_eval(sqrt(4)))

# use substrait_eval_data() to do a more direct test of a translation
with_compiler(compiler, substrait_eval_data(sqrt(b)))

}
