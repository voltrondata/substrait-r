% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compiler.R
\name{current_compiler}
\alias{current_compiler}
\alias{with_compiler}
\alias{local_compiler}
\title{Compiler context}
\usage{
current_compiler()

with_compiler(compiler, code)

local_compiler(compiler, .local_envir = parent.frame())
}
\arguments{
\item{compiler}{A \code{\link[=substrait_compiler]{substrait_compiler()}} or object that can be
coerced to one.}

\item{code}{An expression to evaluate with \code{compiler} as the
\code{\link[=current_compiler]{current_compiler()}}.}

\item{.local_envir}{The environment for which \code{compiler} should remain the
\code{\link[=current_compiler]{current_compiler()}}. This should usually stay the default value of
the calling environment.}
}
\value{
\itemize{
\item \code{\link[=current_compiler]{current_compiler()}} returns a \code{\link[=substrait_compiler]{substrait_compiler()}} or \code{NULL} if
none has been registered.
\item \code{\link[=with_compiler]{with_compiler()}} returns the result of evaluating \code{code}
\item \code{\link[=local_compiler]{local_compiler()}} returns the result of coercing \code{compiler} to a
\code{\link[=substrait_compiler]{substrait_compiler()}}.
}
}
\description{
When translation functions are called, the compiler that is evaluating
them is made available as a global variable accessible via
\code{\link[=current_compiler]{current_compiler()}}. Typically this is not needed directly within a
translation function but is used by \code{\link[=substrait_call]{substrait_call()}} and other functions
that need to interact with the current compiler. Translation authors
may find \code{\link[=with_compiler]{with_compiler()}} and/or \code{\link[=local_compiler]{local_compiler()}} useful to test
translation functions directly.
}
\examples{
current_compiler()

with_compiler(data.frame(a = 1L), {
  current_compiler()$schema
})

local({
  compiler <- local_compiler(data.frame(a = 1L))
  compiler$schema
  current_compiler()$schema
})

current_compiler()

}
