% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compiler.R
\name{SubstraitCompiler}
\alias{SubstraitCompiler}
\title{Substrait Compiler}
\description{
Substrait Compiler

Substrait Compiler
}
\details{
In general, the substrait package provides compiler-agnostic tools to
generate \code{substrait.Plan} objects. However, the consumer that will be
evaluating the plan has more information and in many cases has the ability
to provide more meaningful validation and output than substrait
can provide on its own. The \code{Compiler} R6 class is a mutable object that
provides substrait compilers the ability to customize the behaviour
of the \code{\link[=substrait_compiler]{substrait_compiler()}} as it is created, modified, printed,
and evaluated. While the object itself is mutable, it is cloned whenever
the compiler is modified to minimize a user's interaction with reference
semantics.

Get a function reference identifier for a given function/input
argument combination.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{rel}}{The root of the current \code{substrait.Rel} tree.}

\item{\code{schema}}{A \code{substrait.NamedStruct} containing the field names
and field types of \code{rel}.}

\item{\code{mask}}{A named list of \code{substrait.Expression} objects where the
names are identical to the field names as provided in \code{schema}.
This list is used as the data mask when evaluating expressions
(e.g., \code{\link[rlang:eval_tidy]{rlang::eval_tidy()}}).}

\item{\code{groups}}{A named list of \code{substrait.Expression} to be used for
future grouping (e.g., after calling \code{\link[dplyr:group_by]{dplyr::group_by()}}).}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{SubstraitCompiler$new()}}
\item \href{#method-add_relation}{\code{SubstraitCompiler$add_relation()}}
\item \href{#method-named_table}{\code{SubstraitCompiler$named_table()}}
\item \href{#method-validate}{\code{SubstraitCompiler$validate()}}
\item \href{#method-evaluate}{\code{SubstraitCompiler$evaluate()}}
\item \href{#method-resolve_function}{\code{SubstraitCompiler$resolve_function()}}
\item \href{#method-function_id}{\code{SubstraitCompiler$function_id()}}
\item \href{#method-function_extension}{\code{SubstraitCompiler$function_extension()}}
\item \href{#method-next_id}{\code{SubstraitCompiler$next_id()}}
\item \href{#method-clone}{\code{SubstraitCompiler$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new \link{SubstraitCompiler}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$new(object = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{object}}{An object, most commonly a data.frame or table-like
object.}

\item{\code{...}}{Passed to \code{add_relation()} if \code{object} is not \code{NULL}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_relation"></a>}}
\if{latex}{\out{\hypertarget{method-add_relation}{}}}
\subsection{Method \code{add_relation()}}{
Sets the \code{rel} of this compiler to a \code{substrait.Rel} (usually a
\code{substrait.Rel.ReadRel}) and sets \code{schema} and \code{mask} to represent
the root of the relation tree.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$add_relation(object, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{object}}{An object, most commonly a data.frame or table-like
object.}

\item{\code{...}}{Unused by the default method}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-named_table"></a>}}
\if{latex}{\out{\hypertarget{method-named_table}{}}}
\subsection{Method \code{named_table()}}{
Retrieve a named table
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$named_table(name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{A table name}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The \code{object} that was passed
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-validate"></a>}}
\if{latex}{\out{\hypertarget{method-validate}{}}}
\subsection{Method \code{validate()}}{
Validates a compiler after it was modified. This is an opportunity to
provide meaningful feedback (e.g., errors, warnings)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$validate()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{self}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evaluate"></a>}}
\if{latex}{\out{\hypertarget{method-evaluate}{}}}
\subsection{Method \code{evaluate()}}{
Evaluates the plan being built by the compiler.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$evaluate(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Extra arguments specific to the compiler type.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A table-like object whose structure is defined by the
\link{SubstraitCompiler} class. The returned object should have a
\code{\link[=as.data.frame]{as.data.frame()}} method.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-resolve_function"></a>}}
\if{latex}{\out{\hypertarget{method-resolve_function}{}}}
\subsection{Method \code{resolve_function()}}{
Resolves an R function call as a Substrait function call.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$resolve_function(name, args, template)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{The fully-qualified name of the function as it was
called (e.g., \code{pkg::fun}). If no package name was explicitly
specified, the package name will not be present in \code{name}.}

\item{\code{args}}{A \code{list()} of arguments. These may be R objects or Substrait
objects created while evaluating the user-provided arguments
(e.g., field references or function calls).}

\item{\code{template}}{A \code{substrait.Expression.ScalarFunction}, a
\code{substrait.Expression.WindowFunction}, or a
\code{substrait.AggregateFunction}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A modified \code{template} with \code{function_reference},
\code{args}, and \code{output_type} set.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-function_id"></a>}}
\if{latex}{\out{\hypertarget{method-function_id}{}}}
\subsection{Method \code{function_id()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$function_id(name, arg_types)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{The fully-qualified name of the function as it was
called (e.g., \code{pkg::fun}). If no package name was explicitly
specified, the package name will not be present in \code{name}.}

\item{\code{arg_types}}{A \code{list()} of \code{substrait.Type} objects.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An integer function reference
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-function_extension"></a>}}
\if{latex}{\out{\hypertarget{method-function_extension}{}}}
\subsection{Method \code{function_extension()}}{
Retrieve a function extension by anchor/reference
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$function_extension(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{An function_anchor/function_reference identifier}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A
\code{substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-next_id"></a>}}
\if{latex}{\out{\hypertarget{method-next_id}{}}}
\subsection{Method \code{next_id()}}{
Get the next unique identifier.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$next_id()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
An integer that has not been returned by a previous call to
\code{next_id()} for this instance.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
