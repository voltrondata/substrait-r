% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compiler.R
\name{SubstraitCompiler}
\alias{SubstraitCompiler}
\title{Substrait Compiler}
\description{
Substrait Compiler

Substrait Compiler
}
\details{
The \link{SubstraitCompiler} defines a mutable object that accumulates information
needed to evaluate a \code{substrait.Rel} tree. In addition to the
\code{substrait.Rel} tree itself, the compiler must keep track of function
identifiers, column names, and the R objects (e.g., data frames) that
will be used as leaf nodes when the plan is evaluated. Specific consumers
will need to subclass the \link{SubstraitCompiler} and implement the \verb{$evaluate()}
and/or \verb{$resolve_function()} methods. Typically users will not interact
with R6 methods but will use the pipeable interface
(e.g. \code{\link[=substrait_select]{substrait_select()}}). The pipeable interface clones the compiler
before it is modified to minimize the user's interaction to R6 reference
semantics.

Get a function reference identifier for a given function/input
argument combination.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{rel}}{The root of the current \code{substrait.Rel} tree.}

\item{\code{schema}}{A \code{substrait.NamedStruct} containing the field names
and field types of \code{rel}.}

\item{\code{.data}}{An environment or list containing \code{substrait.Expression}
objects. For a fresh compiler, this will be a list of field references
with the same length as \code{schema$names}; however, during evaluation
this may be updated to contain temporary columns before a relation
is finalized.}

\item{\code{.fns}}{An environment or list containing functions that can be
translated by this compiler.}

\item{\code{groups}}{A named list of \code{substrait.Expression} to be used for
future grouping (e.g., after calling \code{\link[dplyr:group_by]{dplyr::group_by()}}).}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SubstraitCompiler-new}{\code{SubstraitCompiler$new()}}
\item \href{#method-SubstraitCompiler-eval_mask}{\code{SubstraitCompiler$eval_mask()}}
\item \href{#method-SubstraitCompiler-add_relation}{\code{SubstraitCompiler$add_relation()}}
\item \href{#method-SubstraitCompiler-named_table}{\code{SubstraitCompiler$named_table()}}
\item \href{#method-SubstraitCompiler-named_table_list}{\code{SubstraitCompiler$named_table_list()}}
\item \href{#method-SubstraitCompiler-validate}{\code{SubstraitCompiler$validate()}}
\item \href{#method-SubstraitCompiler-plan}{\code{SubstraitCompiler$plan()}}
\item \href{#method-SubstraitCompiler-evaluate}{\code{SubstraitCompiler$evaluate()}}
\item \href{#method-SubstraitCompiler-resolve_function}{\code{SubstraitCompiler$resolve_function()}}
\item \href{#method-SubstraitCompiler-function_id}{\code{SubstraitCompiler$function_id()}}
\item \href{#method-SubstraitCompiler-extension_uri_anchor}{\code{SubstraitCompiler$extension_uri_anchor()}}
\item \href{#method-SubstraitCompiler-function_extension}{\code{SubstraitCompiler$function_extension()}}
\item \href{#method-SubstraitCompiler-next_id}{\code{SubstraitCompiler$next_id()}}
\item \href{#method-SubstraitCompiler-clone}{\code{SubstraitCompiler$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubstraitCompiler-new"></a>}}
\if{latex}{\out{\hypertarget{method-SubstraitCompiler-new}{}}}
\subsection{Method \code{new()}}{
Create a new \link{SubstraitCompiler}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$new(object = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{object}}{An object, most commonly a data.frame or table-like
object.}

\item{\code{...}}{Passed to \code{add_relation()} if \code{object} is not \code{NULL}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubstraitCompiler-eval_mask"></a>}}
\if{latex}{\out{\hypertarget{method-SubstraitCompiler-eval_mask}{}}}
\subsection{Method \code{eval_mask()}}{
Returns the \link[rlang:as_data_mask]{data mask} that will be
used within \code{substrait_eval()}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$eval_mask(.data = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{.data}}{Use \code{FALSE} to return a mask containing only function
members with no columns.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubstraitCompiler-add_relation"></a>}}
\if{latex}{\out{\hypertarget{method-SubstraitCompiler-add_relation}{}}}
\subsection{Method \code{add_relation()}}{
Sets the \code{rel} of this compiler to a \code{substrait.Rel} (usually a
\code{substrait.Rel.ReadRel}) and sets \code{schema} and \code{mask} to represent
the root of the relation tree.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$add_relation(object, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{object}}{An object, most commonly a data.frame or table-like
object.}

\item{\code{...}}{Unused by the default method}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubstraitCompiler-named_table"></a>}}
\if{latex}{\out{\hypertarget{method-SubstraitCompiler-named_table}{}}}
\subsection{Method \code{named_table()}}{
Retrieve a named table
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$named_table(name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{A table name}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The \code{object} that was passed
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubstraitCompiler-named_table_list"></a>}}
\if{latex}{\out{\hypertarget{method-SubstraitCompiler-named_table_list}{}}}
\subsection{Method \code{named_table_list()}}{
Retrieve all named tables as a \code{\link[=list]{list()}}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$named_table_list()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
a named \code{\link[=list]{list()}} of objects
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubstraitCompiler-validate"></a>}}
\if{latex}{\out{\hypertarget{method-SubstraitCompiler-validate}{}}}
\subsection{Method \code{validate()}}{
Validates a compiler after it was modified. This is an opportunity to
provide meaningful feedback (e.g., errors, warnings)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$validate()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{self}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubstraitCompiler-plan"></a>}}
\if{latex}{\out{\hypertarget{method-SubstraitCompiler-plan}{}}}
\subsection{Method \code{plan()}}{
Assembles a \code{substrait.Plan} from the current information available
to the compiler.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$plan()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{substrait.Plan}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubstraitCompiler-evaluate"></a>}}
\if{latex}{\out{\hypertarget{method-SubstraitCompiler-evaluate}{}}}
\subsection{Method \code{evaluate()}}{
Evaluates the plan being built by the compiler.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$evaluate(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Extra arguments specific to the compiler type.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A table-like object whose structure is defined by the
\link{SubstraitCompiler} class. The returned object should have a
\code{\link[=as.data.frame]{as.data.frame()}} method.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubstraitCompiler-resolve_function"></a>}}
\if{latex}{\out{\hypertarget{method-SubstraitCompiler-resolve_function}{}}}
\subsection{Method \code{resolve_function()}}{
Resolves an R function call as a Substrait function call.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$resolve_function(
  name,
  args,
  template,
  output_type = NULL,
  options = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{The fully-qualified name of the function as it was
called (e.g., \code{pkg::fun}). If no package name was explicitly
specified, the package name will not be present in \code{name}.}

\item{\code{args}}{A \code{list()} of arguments. These may be R objects or Substrait
objects created while evaluating the user-provided arguments
(e.g., field references or function calls).}

\item{\code{template}}{A \code{substrait.Expression.ScalarFunction}, a
\code{substrait.Expression.WindowFunction}, or a
\code{substrait.AggregateFunction}.}

\item{\code{output_type}}{An explicit output type to use or a function accepting
one type per \code{args}.}

\item{\code{options}}{An optional list of \code{substrait.FunctionOptions} message
specifying function options for this call.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A modified \code{template} with \code{function_reference},
\code{args}, and \code{output_type} set.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubstraitCompiler-function_id"></a>}}
\if{latex}{\out{\hypertarget{method-SubstraitCompiler-function_id}{}}}
\subsection{Method \code{function_id()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$function_id(name, arg_types)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{The fully-qualified name of the function as it was
called (e.g., \code{pkg::fun}). If no package name was explicitly
specified, the package name will not be present in \code{name}.}

\item{\code{arg_types}}{A \code{list()} of \code{substrait.Type} objects.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An integer function reference
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubstraitCompiler-extension_uri_anchor"></a>}}
\if{latex}{\out{\hypertarget{method-SubstraitCompiler-extension_uri_anchor}{}}}
\subsection{Method \code{extension_uri_anchor()}}{
Get the extension uri anchor value for a given function
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$extension_uri_anchor(name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{The name of the function}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The uri anchor value
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubstraitCompiler-function_extension"></a>}}
\if{latex}{\out{\hypertarget{method-SubstraitCompiler-function_extension}{}}}
\subsection{Method \code{function_extension()}}{
Retrieve a function extension by anchor/reference
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$function_extension(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{An function_anchor/function_reference identifier}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A
\code{substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubstraitCompiler-next_id"></a>}}
\if{latex}{\out{\hypertarget{method-SubstraitCompiler-next_id}{}}}
\subsection{Method \code{next_id()}}{
Get the next unique identifier.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$next_id()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
An integer that has not been returned by a previous call to
\code{next_id()} for this instance.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubstraitCompiler-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SubstraitCompiler-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
