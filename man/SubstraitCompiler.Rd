% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compiler-r6.R
\name{SubstraitCompiler}
\alias{SubstraitCompiler}
\title{Substrait Consumer}
\description{
Substrait Consumer

Substrait Consumer
}
\details{
In general, the substrait package provides consumer-agnostic tools to
generate \code{substrait.Plan} objects. However, the consumer that will be
evaluating the plan has more information and in many cases has the ability
to provide more meaningful validation and output than substrait
can provide on its own. The \code{Consumer} R6 class is a mutable object that
provides substrait consumers the ability to customize the behaviour
of the \code{\link[=substrait_compiler]{substrait_compiler()}} as it is created, modified, printed,
and evaluated. While the object itself is mutable, it is cloned whenever
the builder is modified to minimize a user's interaction with reference
semantics.

Get a function reference identifier for a given function/input
argument combination.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{SubstraitCompiler$new()}}
\item \href{#method-create_builder}{\code{SubstraitCompiler$create_builder()}}
\item \href{#method-print_builder}{\code{SubstraitCompiler$print_builder()}}
\item \href{#method-named_table}{\code{SubstraitCompiler$named_table()}}
\item \href{#method-validate_builder}{\code{SubstraitCompiler$validate_builder()}}
\item \href{#method-evaluate_builder}{\code{SubstraitCompiler$evaluate_builder()}}
\item \href{#method-resolve_function}{\code{SubstraitCompiler$resolve_function()}}
\item \href{#method-function_id}{\code{SubstraitCompiler$function_id()}}
\item \href{#method-function_extension}{\code{SubstraitCompiler$function_extension()}}
\item \href{#method-next_id}{\code{SubstraitCompiler$next_id()}}
\item \href{#method-clone}{\code{SubstraitCompiler$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new \link{SubstraitCompiler}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-create_builder"></a>}}
\if{latex}{\out{\hypertarget{method-create_builder}{}}}
\subsection{Method \code{create_builder()}}{
Implementation of \code{Consumer$create_builder()}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$create_builder(object, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{object}}{An object, most commonly a data.frame or table-like
object.}

\item{\code{...}}{Unused}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print_builder"></a>}}
\if{latex}{\out{\hypertarget{method-print_builder}{}}}
\subsection{Method \code{print_builder()}}{
Prints a preview the plan being built by \code{builder}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$print_builder(builder, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{builder}}{A \code{\link[=substrait_compiler]{substrait_compiler()}}}

\item{\code{...}}{The dots passed to \code{\link[=print]{print()}}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-named_table"></a>}}
\if{latex}{\out{\hypertarget{method-named_table}{}}}
\subsection{Method \code{named_table()}}{
Retrieve a named table
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$named_table(name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{A table name}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The \code{object} that was passed
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-validate_builder"></a>}}
\if{latex}{\out{\hypertarget{method-validate_builder}{}}}
\subsection{Method \code{validate_builder()}}{
Implementation of \code{Consumer$validate_builder()}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$validate_builder(builder)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{builder}}{A \code{\link[=substrait_compiler]{substrait_compiler()}}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evaluate_builder"></a>}}
\if{latex}{\out{\hypertarget{method-evaluate_builder}{}}}
\subsection{Method \code{evaluate_builder()}}{
Implementation of \code{Consumer$evaluate_builder()}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$evaluate_builder(builder, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{builder}}{A \code{\link[=substrait_compiler]{substrait_compiler()}}}

\item{\code{...}}{Passed from \code{\link[=substrait_evaluate]{substrait_evaluate()}}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{builder}, unchanged
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-resolve_function"></a>}}
\if{latex}{\out{\hypertarget{method-resolve_function}{}}}
\subsection{Method \code{resolve_function()}}{
Implementation of \code{Consumer$resolve_function()}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$resolve_function(name, args, template, context = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{The fully-qualified name of the function as it was
called (e.g., \code{pkg::fun}). If no package name was explicitly
specified, the package name will not be present in \code{name}.}

\item{\code{args}}{A \code{list()} of arguments. These may be R objects or Substrait
objects created while evaluating the user-provided arguments
(e.g., field references or function calls).}

\item{\code{template}}{A \code{substrait.Expression.ScalarFunction}, a
\code{substrait.Expression.WindowFunction}, or a
\code{substrait.AggregateFunction}.}

\item{\code{context}}{Experimental...a portion of the \code{builder} needed
to evaluate names and types when evaluating expressions.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-function_id"></a>}}
\if{latex}{\out{\hypertarget{method-function_id}{}}}
\subsection{Method \code{function_id()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$function_id(name, arg_types)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{The fully-qualified name of the function as it was
called (e.g., \code{pkg::fun}). If no package name was explicitly
specified, the package name will not be present in \code{name}.}

\item{\code{arg_types}}{A \code{list()} of \code{substrait.Type} objects.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An integer function reference
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-function_extension"></a>}}
\if{latex}{\out{\hypertarget{method-function_extension}{}}}
\subsection{Method \code{function_extension()}}{
Retrieve a function extension by anchor/reference
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$function_extension(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{An function_anchor/function_reference identifier}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A
\code{substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-next_id"></a>}}
\if{latex}{\out{\hypertarget{method-next_id}{}}}
\subsection{Method \code{next_id()}}{
Get the next unique identifier.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$next_id()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
An integer that has not been returned by a previous call to
\code{next_id()} for this instance.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SubstraitCompiler$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
