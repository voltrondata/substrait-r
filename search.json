[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dewey Dunnington. Author, maintainer. Nic Crane. Author. Jonathan Keane. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dunnington D, Crane N, Keane J (2022). substrait: 'Substrait' Cross-Language Serialization Relational Algebra. R package version 0.0.0.9000.","code":"@Manual{,   title = {substrait: 'Substrait' Cross-Language Serialization for Relational Algebra},   author = {Dewey Dunnington and Nic Crane and Jonathan Keane},   year = {2022},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"substrait-r-interface","dir":"","previous_headings":"","what":"Substrait Cross-Language Serialization for Relational Algebra","title":"Substrait Cross-Language Serialization for Relational Algebra","text":"Substrait cross-language specification data compute operations. Substrait specification creates standard compute expressions—done data. Substrait R package provides R interface Substrait, allowing users construct Substrait plan R evaluation Substrait consumer, Arrow DuckDB. experimental package heavy development!","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Substrait Cross-Language Serialization for Relational Algebra","text":"can install development version substrait GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"voltrondata/substrait-r\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Substrait Cross-Language Serialization for Relational Algebra","text":"Basic construction Substrait plan evaluating using DuckDB Substrait consumer: can inspect Plan generated saving result calling $plan(): can also construct Substrait plan evaluate using Acero Substrait consumer. use Acero Substrait consumer need special build arrow package Arrow configured using -DARROW_SUBSTRAIT=.","code":"library(substrait) library(dplyr)  mtcars %>%    duckdb_substrait_compiler() %>%   mutate(mpg_plus_one = mpg + 1) %>%    select(mpg, wt, mpg_plus_one) %>%    collect() #> # A tibble: 32 × 3 #>      mpg    wt mpg_plus_one #>    <dbl> <dbl>        <dbl> #>  1  21    2.62         22   #>  2  21    2.88         22   #>  3  22.8  2.32         23.8 #>  4  21.4  3.22         22.4 #>  5  18.7  3.44         19.7 #>  6  18.1  3.46         19.1 #>  7  14.3  3.57         15.3 #>  8  24.4  3.19         25.4 #>  9  22.8  3.15         23.8 #> 10  19.2  3.44         20.2 #> # … with 22 more rows compiler <- data.frame(col1 = 1L) %>%    duckdb_substrait_compiler() %>%   mutate(mpg_plus_one = col1 + 1)  compiler$plan() #> message of type 'substrait.Plan' with 3 fields set #> extension_uris { #>   extension_uri_anchor: 1 #> } #> extensions { #>   extension_function { #>     extension_uri_reference: 1 #>     function_anchor: 2 #>     name: \"+\" #>   } #> } #> relations { #>   root { #>     input { #>       project { #>         common { #>           emit { #>             output_mapping: 1 #>             output_mapping: 2 #>           } #>         } #>         input { #>           read { #>             base_schema { #>               names: \"col1\" #>               struct_ { #>                 types { #>                   i32 { #>                     nullability: NULLABILITY_NULLABLE #>                   } #>                 } #>               } #>             } #>             named_table { #>               names: \"named_table_1\" #>             } #>           } #>         } #>         expressions { #>           selection { #>             direct_reference { #>               struct_field { #>               } #>             } #>             root_reference { #>             } #>           } #>         } #>         expressions { #>           scalar_function { #>             function_reference: 2 #>             output_type { #>               i32 { #>                 nullability: NULLABILITY_NULLABLE #>               } #>             } #>             arguments { #>               value { #>                 selection { #>                   direct_reference { #>                     struct_field { #>                     } #>                   } #>                   root_reference { #>                   } #>                 } #>               } #>             } #>             arguments { #>               value { #>                 literal { #>                   fp64: 1 #>                 } #>               } #>             } #>           } #>         } #>       } #>     } #>     names: \"col1\" #>     names: \"mpg_plus_one\" #>   } #> } library(substrait) library(dplyr)  mtcars %>%    arrow_substrait_compiler() %>%   mutate(mpg_plus_one = mpg + 1) %>%    select(mpg, wt, mpg_plus_one) %>%    collect() #> # A tibble: 32 × 3 #>      mpg    wt mpg_plus_one #>    <dbl> <dbl>        <dbl> #>  1  21    2.62         22   #>  2  21    2.88         22   #>  3  22.8  2.32         23.8 #>  4  21.4  3.22         22.4 #>  5  18.7  3.44         19.7 #>  6  18.1  3.46         19.1 #>  7  14.3  3.57         15.3 #>  8  24.4  3.19         25.4 #>  9  22.8  3.15         23.8 #> 10  19.2  3.44         20.2 #> # … with 22 more rows"},{"path":"/index.html","id":"create-substrait-proto-objects","dir":"","previous_headings":"","what":"Create ‘Substrait’ proto objects","title":"Substrait Cross-Language Serialization for Relational Algebra","text":"can create Substrait proto objects using substrait base object using substrait_create(): can convert R object Substrait object using as_substrait(object, type): type can either string qualified name object (needed communicate certain types like \"substrait.Expression.Literal.Decimal\" precision scale addition value). Restore R object Substrait object using from_substrait(message, prototype): Substrait objects list-like (.e., methods defined [[ $), can get set fields. Note unset different NULL (just like R list). constructors currently implemented using 1000 lines auto-generated code made inspecting nanopb-compiled .proto files RProtoBuf. probably best final approach allows us get started writing good as_substrait() from_substrait() methods various types R objects.","code":"substrait$Type$Boolean$create() #> message of type 'substrait.Type.Boolean' with 0 fields set substrait_create(\"substrait.Type.Boolean\") #> message of type 'substrait.Type.Boolean' with 0 fields set (msg <- as_substrait(4L, \"substrait.Expression\")) #> message of type 'substrait.Expression' with 1 field set #> literal { #>   i32: 4 #> } from_substrait(msg, integer()) #> [1] 4 msg$literal <- substrait$Expression$Literal$create(i32 = 5L) msg #> message of type 'substrait.Expression' with 1 field set #> literal { #>   i32: 5 #> }"},{"path":"/reference/SubstraitCompiler.html","id":null,"dir":"Reference","previous_headings":"","what":"Substrait Compiler — SubstraitCompiler","title":"Substrait Compiler — SubstraitCompiler","text":"Substrait Compiler Substrait Compiler","code":""},{"path":"/reference/SubstraitCompiler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Substrait Compiler — SubstraitCompiler","text":"SubstraitCompiler defines mutable object accumulates information needed evaluate substrait.Rel tree. addition substrait.Rel tree , compiler must keep track function identifiers, column names, R objects (e.g., data frames) used leaf nodes plan evaluated. Specific consumers need subclass SubstraitCompiler implement $evaluate() /$resolve_function() methods. Typically users interact R6 methods use pipeable interface (e.g. substrait_select()). pipeable interface clones compiler modified minimize user's interaction R6 reference semantics. Get function reference identifier given function/input argument combination.","code":""},{"path":"/reference/SubstraitCompiler.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Substrait Compiler — SubstraitCompiler","text":"rel root current substrait.Rel tree. schema substrait.NamedStruct containing field names field types rel. .data environment list containing substrait.Expression objects. fresh compiler, list field references length schema$names; however, evaluation may updated contain temporary columns relation finalized. .fns environment list containing functions can translated compiler. groups named list substrait.Expression used future grouping (e.g., calling dplyr::group_by()).","code":""},{"path":[]},{"path":"/reference/SubstraitCompiler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Substrait Compiler — SubstraitCompiler","text":"SubstraitCompiler$new() SubstraitCompiler$eval_mask() SubstraitCompiler$add_relation() SubstraitCompiler$named_table() SubstraitCompiler$named_table_list() SubstraitCompiler$validate() SubstraitCompiler$plan() SubstraitCompiler$evaluate() SubstraitCompiler$resolve_function() SubstraitCompiler$function_id() SubstraitCompiler$extension_uri_anchor() SubstraitCompiler$function_extension() SubstraitCompiler$next_id() SubstraitCompiler$clone()","code":""},{"path":"/reference/SubstraitCompiler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Substrait Compiler — SubstraitCompiler","text":"Create new SubstraitCompiler.","code":""},{"path":"/reference/SubstraitCompiler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substrait Compiler — SubstraitCompiler","text":"","code":"SubstraitCompiler$new(object = NULL, ...)"},{"path":"/reference/SubstraitCompiler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substrait Compiler — SubstraitCompiler","text":"object object, commonly data.frame table-like object. ... Passed add_relation() object NULL","code":""},{"path":"/reference/SubstraitCompiler.html","id":"method-eval-mask-","dir":"Reference","previous_headings":"","what":"Method eval_mask()","title":"Substrait Compiler — SubstraitCompiler","text":"Returns data mask used within substrait_eval().","code":""},{"path":"/reference/SubstraitCompiler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Substrait Compiler — SubstraitCompiler","text":"","code":"SubstraitCompiler$eval_mask(.data = TRUE)"},{"path":"/reference/SubstraitCompiler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substrait Compiler — SubstraitCompiler","text":".data Use FALSE return mask containing function members columns.","code":""},{"path":"/reference/SubstraitCompiler.html","id":"method-add-relation-","dir":"Reference","previous_headings":"","what":"Method add_relation()","title":"Substrait Compiler — SubstraitCompiler","text":"Sets rel compiler substrait.Rel (usually substrait.Rel.ReadRel) sets schema mask represent root relation tree.","code":""},{"path":"/reference/SubstraitCompiler.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Substrait Compiler — SubstraitCompiler","text":"","code":"SubstraitCompiler$add_relation(object, ...)"},{"path":"/reference/SubstraitCompiler.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substrait Compiler — SubstraitCompiler","text":"object object, commonly data.frame table-like object. ... Unused default method","code":""},{"path":"/reference/SubstraitCompiler.html","id":"method-named-table-","dir":"Reference","previous_headings":"","what":"Method named_table()","title":"Substrait Compiler — SubstraitCompiler","text":"Retrieve named table","code":""},{"path":"/reference/SubstraitCompiler.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Substrait Compiler — SubstraitCompiler","text":"","code":"SubstraitCompiler$named_table(name)"},{"path":"/reference/SubstraitCompiler.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substrait Compiler — SubstraitCompiler","text":"name table name","code":""},{"path":"/reference/SubstraitCompiler.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Substrait Compiler — SubstraitCompiler","text":"object passed","code":""},{"path":"/reference/SubstraitCompiler.html","id":"method-named-table-list-","dir":"Reference","previous_headings":"","what":"Method named_table_list()","title":"Substrait Compiler — SubstraitCompiler","text":"Retrieve named tables list()","code":""},{"path":"/reference/SubstraitCompiler.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Substrait Compiler — SubstraitCompiler","text":"","code":"SubstraitCompiler$named_table_list()"},{"path":"/reference/SubstraitCompiler.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Substrait Compiler — SubstraitCompiler","text":"named list() objects","code":""},{"path":"/reference/SubstraitCompiler.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":"Substrait Compiler — SubstraitCompiler","text":"Validates compiler modified. opportunity provide meaningful feedback (e.g., errors, warnings)","code":""},{"path":"/reference/SubstraitCompiler.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Substrait Compiler — SubstraitCompiler","text":"","code":"SubstraitCompiler$validate()"},{"path":"/reference/SubstraitCompiler.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Substrait Compiler — SubstraitCompiler","text":"self","code":""},{"path":"/reference/SubstraitCompiler.html","id":"method-plan-","dir":"Reference","previous_headings":"","what":"Method plan()","title":"Substrait Compiler — SubstraitCompiler","text":"Assembles substrait.Plan current information available compiler.","code":""},{"path":"/reference/SubstraitCompiler.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Substrait Compiler — SubstraitCompiler","text":"","code":"SubstraitCompiler$plan()"},{"path":"/reference/SubstraitCompiler.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Substrait Compiler — SubstraitCompiler","text":"substrait.Plan","code":""},{"path":"/reference/SubstraitCompiler.html","id":"method-evaluate-","dir":"Reference","previous_headings":"","what":"Method evaluate()","title":"Substrait Compiler — SubstraitCompiler","text":"Evaluates plan built compiler.","code":""},{"path":"/reference/SubstraitCompiler.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Substrait Compiler — SubstraitCompiler","text":"","code":"SubstraitCompiler$evaluate(...)"},{"path":"/reference/SubstraitCompiler.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substrait Compiler — SubstraitCompiler","text":"... Extra arguments specific compiler type.","code":""},{"path":"/reference/SubstraitCompiler.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Substrait Compiler — SubstraitCompiler","text":"table-like object whose structure defined SubstraitCompiler class. returned object .data.frame() method.","code":""},{"path":"/reference/SubstraitCompiler.html","id":"method-resolve-function-","dir":"Reference","previous_headings":"","what":"Method resolve_function()","title":"Substrait Compiler — SubstraitCompiler","text":"Resolves R function call Substrait function call.","code":""},{"path":"/reference/SubstraitCompiler.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Substrait Compiler — SubstraitCompiler","text":"","code":"SubstraitCompiler$resolve_function(   name,   args,   template,   output_type = NULL,   options = NULL )"},{"path":"/reference/SubstraitCompiler.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substrait Compiler — SubstraitCompiler","text":"name fully-qualified name function called (e.g., pkg::fun). package name explicitly specified, package name present name. args list() arguments. may R objects Substrait objects created evaluating user-provided arguments (e.g., field references function calls). template substrait.Expression.ScalarFunction, substrait.Expression.WindowFunction, substrait.AggregateFunction. output_type explicit output type use function accepting one type per args. options optional list substrait.FunctionOptions message specifying function options call.","code":""},{"path":"/reference/SubstraitCompiler.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Substrait Compiler — SubstraitCompiler","text":"modified template function_reference, args, output_type set.","code":""},{"path":[]},{"path":"/reference/SubstraitCompiler.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Substrait Compiler — SubstraitCompiler","text":"","code":"SubstraitCompiler$function_id(name, arg_types)"},{"path":"/reference/SubstraitCompiler.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substrait Compiler — SubstraitCompiler","text":"name fully-qualified name function called (e.g., pkg::fun). package name explicitly specified, package name present name. arg_types list() substrait.Type objects.","code":""},{"path":"/reference/SubstraitCompiler.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Substrait Compiler — SubstraitCompiler","text":"integer function reference","code":""},{"path":"/reference/SubstraitCompiler.html","id":"method-extension-uri-anchor-","dir":"Reference","previous_headings":"","what":"Method extension_uri_anchor()","title":"Substrait Compiler — SubstraitCompiler","text":"Get extension uri anchor value given function","code":""},{"path":"/reference/SubstraitCompiler.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Substrait Compiler — SubstraitCompiler","text":"","code":"SubstraitCompiler$extension_uri_anchor(name)"},{"path":"/reference/SubstraitCompiler.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substrait Compiler — SubstraitCompiler","text":"name name function","code":""},{"path":"/reference/SubstraitCompiler.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Substrait Compiler — SubstraitCompiler","text":"uri anchor value","code":""},{"path":"/reference/SubstraitCompiler.html","id":"method-function-extension-","dir":"Reference","previous_headings":"","what":"Method function_extension()","title":"Substrait Compiler — SubstraitCompiler","text":"Retrieve function extension anchor/reference","code":""},{"path":"/reference/SubstraitCompiler.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Substrait Compiler — SubstraitCompiler","text":"","code":"SubstraitCompiler$function_extension(id)"},{"path":"/reference/SubstraitCompiler.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substrait Compiler — SubstraitCompiler","text":"id function_anchor/function_reference identifier","code":""},{"path":"/reference/SubstraitCompiler.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Substrait Compiler — SubstraitCompiler","text":"substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction.","code":""},{"path":"/reference/SubstraitCompiler.html","id":"method-next-id-","dir":"Reference","previous_headings":"","what":"Method next_id()","title":"Substrait Compiler — SubstraitCompiler","text":"Get next unique identifier.","code":""},{"path":"/reference/SubstraitCompiler.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Substrait Compiler — SubstraitCompiler","text":"","code":"SubstraitCompiler$next_id()"},{"path":"/reference/SubstraitCompiler.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"Substrait Compiler — SubstraitCompiler","text":"integer returned previous call next_id() instance.","code":""},{"path":"/reference/SubstraitCompiler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Substrait Compiler — SubstraitCompiler","text":"objects class cloneable method.","code":""},{"path":"/reference/SubstraitCompiler.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Substrait Compiler — SubstraitCompiler","text":"","code":"SubstraitCompiler$clone(deep = FALSE)"},{"path":"/reference/SubstraitCompiler.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substrait Compiler — SubstraitCompiler","text":"deep Whether make deep clone.","code":""},{"path":"/reference/arrow_substrait_compiler.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Arrow Substrait Compiler — arrow_substrait_compiler","title":"Create an Arrow Substrait Compiler — arrow_substrait_compiler","text":"Create Arrow Substrait Compiler","code":""},{"path":"/reference/arrow_substrait_compiler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Arrow Substrait Compiler — arrow_substrait_compiler","text":"","code":"arrow_substrait_compiler(object, ...)"},{"path":"/reference/arrow_substrait_compiler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Arrow Substrait Compiler — arrow_substrait_compiler","text":"object data.frame(), arrow::Table, arrow::RecordBatch, arrow::Dataset, anything else can written parquet file using arrow::write_parquet(). ... Unused.","code":""},{"path":"/reference/arrow_substrait_compiler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an Arrow Substrait Compiler — arrow_substrait_compiler","text":"SubstraitCompiler subclass ","code":""},{"path":"/reference/as_substrait.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to and from 'Substrait' messages — as_substrait","title":"Convert to and from 'Substrait' messages — as_substrait","text":"Convert 'Substrait' messages","code":""},{"path":"/reference/as_substrait.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to and from 'Substrait' messages — as_substrait","text":"","code":"as_substrait(x, .ptype = NULL, ...)  from_substrait(msg, x, ...)"},{"path":"/reference/as_substrait.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to and from 'Substrait' messages — as_substrait","text":"x object convert 'Substrait' message. Note as_substrait() from_substrait() dispatch x. .ptype string .qualified_name prototype message correct type. ... Passed S3 methods msg substrait message (e.g., created using substrait_create()).","code":""},{"path":"/reference/as_substrait.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to and from 'Substrait' messages — as_substrait","text":"RProtoBuf::Message substrait_proto_message (e.g., created substrait_create())","code":""},{"path":"/reference/as_substrait.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to and from 'Substrait' messages — as_substrait","text":"","code":"as_substrait(substrait$Type$Boolean$create(type_variation_reference = 1)) #> message of type 'substrait.Type.Boolean' with 1 field set #> type_variation_reference: 1"},{"path":"/reference/current_compiler.html","id":null,"dir":"Reference","previous_headings":"","what":"Compiler context — current_compiler","title":"Compiler context — current_compiler","text":"translation functions called, compiler evaluating made available global variable accessible via current_compiler(). Typically needed directly within translation function used substrait_call() functions need interact current compiler. Translation authors may find with_compiler() /local_compiler() useful test translation functions directly.","code":""},{"path":"/reference/current_compiler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compiler context — current_compiler","text":"","code":"current_compiler()  with_compiler(compiler, code)  local_compiler(compiler, .local_envir = parent.frame())"},{"path":"/reference/current_compiler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compiler context — current_compiler","text":"compiler substrait_compiler() object can coerced one. code expression evaluate compiler current_compiler(). .local_envir environment compiler remain current_compiler(). usually stay default value calling environment.","code":""},{"path":"/reference/current_compiler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compiler context — current_compiler","text":"current_compiler() returns substrait_compiler() NULL none registered. with_compiler() returns result evaluating code local_compiler() returns result coercing compiler substrait_compiler().","code":""},{"path":"/reference/current_compiler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compiler context — current_compiler","text":"","code":"current_compiler() #> NULL  with_compiler(data.frame(a = 1L), {   current_compiler()$schema }) #> message of type 'substrait.NamedStruct' with 2 fields set #> names: \"a\" #> struct_ { #>   types { #>     i32 { #>       nullability: NULLABILITY_NULLABLE #>     } #>   } #> }  local({   compiler <- local_compiler(data.frame(a = 1L))   compiler$schema   current_compiler()$schema }) #> message of type 'substrait.NamedStruct' with 2 fields set #> names: \"a\" #> struct_ { #>   types { #>     i32 { #>       nullability: NULLABILITY_NULLABLE #>     } #>   } #> }  current_compiler() #> NULL"},{"path":"/reference/duckdb_get_substrait.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB Substrait Interface — duckdb_get_substrait","title":"DuckDB Substrait Interface — duckdb_get_substrait","text":"DuckDB Substrait Interface","code":""},{"path":"/reference/duckdb_get_substrait.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB Substrait Interface — duckdb_get_substrait","text":"","code":"duckdb_get_substrait(sql, tables = list())  duckdb_from_substrait(   plan,   tables = list(),   col_names = plan$relations[[1]]$root$names,   as_data_frame = TRUE )  has_duckdb_with_substrait()"},{"path":"/reference/duckdb_get_substrait.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB Substrait Interface — duckdb_get_substrait","text":"sql SQL expression generate Substrait plan tables named list tables populate database plan substrait.Plan proto object col_names final column names result as_data_frame Use FALSE return arrow::Table instead data.frame.","code":""},{"path":"/reference/duckdb_get_substrait.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB Substrait Interface — duckdb_get_substrait","text":"duckdb_get_substrait(): substrait.Plan protobuf object duckdb_from_substrait(): data.frame arrow Table","code":""},{"path":"/reference/duckdb_get_substrait.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB Substrait Interface — duckdb_get_substrait","text":"","code":"plan <- duckdb_get_substrait(   \"SELECT * from mtcars WHERE mpg > 30\",   tables = list(mtcars = mtcars) )  duckdb_from_substrait(plan, tables = list(mtcars = mtcars)) #> # A tibble: 4 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1 #> 2  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2 #> 3  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1 #> 4  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2"},{"path":"/reference/duckdb_substrait_compiler.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an DuckDB Substrait Compiler — duckdb_substrait_compiler","title":"Create an DuckDB Substrait Compiler — duckdb_substrait_compiler","text":"Create DuckDB Substrait Compiler","code":""},{"path":"/reference/duckdb_substrait_compiler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an DuckDB Substrait Compiler — duckdb_substrait_compiler","text":"","code":"duckdb_substrait_compiler(object, ...)"},{"path":"/reference/duckdb_substrait_compiler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an DuckDB Substrait Compiler — duckdb_substrait_compiler","text":"object data.frame(), arrow::Table, arrow::RecordBatch, arrow::Dataset, anything else can written parquet file using arrow::write_parquet(). ... Unused.","code":""},{"path":"/reference/duckdb_substrait_compiler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an DuckDB Substrait Compiler — duckdb_substrait_compiler","text":"SubstraitCompiler subclass.","code":""},{"path":"/reference/example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data — example_data","title":"Example data — example_data","text":"Data use examples tests multiple different data types","code":""},{"path":"/reference/example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data — example_data","text":"","code":"example_data"},{"path":"/reference/example_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data — example_data","text":"object class tbl_df (inherits tbl, data.frame) 10 rows 9 columns.","code":""},{"path":"/reference/example_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example data — example_data","text":"","code":"example_data #> # A tibble: 10 × 9 #>      int      dbl  dbl2 lgl   false chr   verses                 padde…¹ some_…² #>    <int>    <dbl> <dbl> <lgl> <lgl> <chr> <chr>                  <chr>     <dbl> #>  1 -3212  -999     -Inf NA    FALSE a     Por cada muro, un lam… \" a \"        -1 #>  2     2   -99        5 TRUE  FALSE b     En Jerusalén la dorada \"  b  \"       2 #>  3     3    -9        5 NA    FALSE c     Y mil vidas malgastad… \"   c …      -3 #>  4    NA     0        5 TRUE  FALSE d     Por cada mandamiento   \"    d…      NA #>  5     5     9        5 FALSE FALSE e     Yo soy polvo de tu vi… \"     …      -5 #>  6     6     3.14     5 FALSE FALSE NA    Y aunque sangro de tu… \"     …       6 #>  7     7    99        5 NA    FALSE g     Y cada piedra querida  \"     …      -7 #>  8     8 10000        5 TRUE  FALSE h     Guarda mi amor más pr… \"     …       8 #>  9     9 10000        5 FALSE FALSE i     No hay una piedra en … \"     …      -9 #> 10  3212    NA        5 TRUE  FALSE j     Que valga lo que una … \"     …      10 #> # … with abbreviated variable names ¹​padded_strings, ²​some_negative"},{"path":"/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr filter, select","code":""},{"path":"/reference/select.SubstraitCompiler.html","id":null,"dir":"Reference","previous_headings":"","what":"dplyr verb implementations — select.SubstraitCompiler","title":"dplyr verb implementations — select.SubstraitCompiler","text":"dplyr verb implementations","code":""},{"path":"/reference/select.SubstraitCompiler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dplyr verb implementations — select.SubstraitCompiler","text":"","code":"# S3 method for SubstraitCompiler select(.data, ...)  # S3 method for SubstraitCompiler rename(.data, ...)  # S3 method for SubstraitCompiler rename_with(.data, .fn, .cols = dplyr::everything(), ...)  # S3 method for SubstraitCompiler filter(.data, ...)  # S3 method for SubstraitCompiler mutate(.data, ..., .keep = c(\"all\", \"used\", \"unused\", \"none\"))  # S3 method for SubstraitCompiler transmute(.data, ...)  # S3 method for SubstraitCompiler arrange(.data, ..., .by_group = FALSE)  # S3 method for SubstraitCompiler group_by(.data, ..., .add = FALSE, .drop = NULL)  # S3 method for SubstraitCompiler ungroup(x, ...)  # S3 method for SubstraitCompiler summarise(.data, ..., .groups = NULL)  # S3 method for SubstraitCompiler summarize(.data, ..., .groups = NULL)  # S3 method for SubstraitCompiler collect(x, ...)  # S3 method for SubstraitCompiler relocate(.data, ..., .before = NULL, .after = NULL)"},{"path":"/reference/select.SubstraitCompiler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dplyr verb implementations — select.SubstraitCompiler","text":".data, x substrait_compiler() ... select(): see dplyr::select() rename(): see dplyr::rename() filter(): see dplyr::filter() mutate(): see dplyr::mutate() arrange(): see dplyr::arrange() .fn Function transform selected .cols; seedplyr::rename_with() .cols Columns rename; seedplyr::rename_with() .keep columns retained output; see dplyr::mutate() .by_group sort grouping variable? seedplyr::arrange() .add Use TRUE add groupings current groupings FALSE reset grouping. .drop supported, see dplyr::group_by() .groups One \"drop_last\", \"drop\", \"keep\" (see dplyr::summarise()). .Destination columns move; see dplyr::relocate() .Destination columns move; see dplyr::relocate()","code":""},{"path":"/reference/select.SubstraitCompiler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dplyr verb implementations — select.SubstraitCompiler","text":"modified substrait_compiler()","code":""},{"path":"/reference/select.SubstraitCompiler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dplyr verb implementations — select.SubstraitCompiler","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union compiler <- duckdb_substrait_compiler(mtcars)  select(compiler, mpg2 = mpg) %>% collect() #> # A tibble: 32 × 1 #>     mpg2 #>    <dbl> #>  1  21   #>  2  21   #>  3  22.8 #>  4  21.4 #>  5  18.7 #>  6  18.1 #>  7  14.3 #>  8  24.4 #>  9  22.8 #> 10  19.2 #> # … with 22 more rows rename(compiler, mpg2 = mpg) %>% collect() #> # A tibble: 32 × 11 #>     mpg2   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # … with 22 more rows filter(compiler, mpg > 20) %>% collect() #> # A tibble: 14 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6 160     110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6 160     110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4 108      93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6 258     110  3.08  3.22  19.4     1     0     3     1 #>  5  24.4     4 147.     62  3.69  3.19  20       1     0     4     2 #>  6  22.8     4 141.     95  3.92  3.15  22.9     1     0     4     2 #>  7  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1 #>  8  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2 #>  9  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1 #> 10  21.5     4 120.     97  3.7   2.46  20.0     1     0     3     1 #> 11  27.3     4  79      66  4.08  1.94  18.9     1     1     4     1 #> 12  26       4 120.     91  4.43  2.14  16.7     0     1     5     2 #> 13  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2 #> 14  21.4     4 121     109  4.11  2.78  18.6     1     1     4     2 mutate(compiler, mpg + 10) %>% collect() #> # A tibble: 32 × 12 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb `mpg + 10` #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>      <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4       31   #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4       31   #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1       32.8 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1       31.4 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2       28.7 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1       28.1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4       24.3 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2       34.4 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2       32.8 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4       29.2 #> # … with 22 more rows transmute(compiler, mpg + 10) %>% collect() #> # A tibble: 32 × 1 #>    `mpg + 10` #>         <dbl> #>  1       31   #>  2       31   #>  3       32.8 #>  4       31.4 #>  5       28.7 #>  6       28.1 #>  7       24.3 #>  8       34.4 #>  9       32.8 #> 10       29.2 #> # … with 22 more rows arrange(compiler, desc(mpg)) %>% collect() #> # A tibble: 32 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1 #>  2  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1 #>  3  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2 #>  4  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2 #>  5  27.3     4  79      66  4.08  1.94  18.9     1     1     4     1 #>  6  26       4 120.     91  4.43  2.14  16.7     0     1     5     2 #>  7  24.4     4 147.     62  3.69  3.19  20       1     0     4     2 #>  8  22.8     4 108      93  3.85  2.32  18.6     1     1     4     1 #>  9  22.8     4 141.     95  3.92  3.15  22.9     1     0     4     2 #> 10  21.5     4 120.     97  3.7   2.46  20.0     1     0     3     1 #> # … with 22 more rows"},{"path":"/reference/substrait-package.html","id":null,"dir":"Reference","previous_headings":"","what":"substrait: 'Substrait' Cross-Language Serialization for Relational Algebra — substrait-package","title":"substrait: 'Substrait' Cross-Language Serialization for Relational Algebra — substrait-package","text":"Provides R interface 'Substrait' cross-language serialization relational algebra.","code":""},{"path":"/reference/substrait-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"substrait: 'Substrait' Cross-Language Serialization for Relational Algebra — substrait-package","text":"Maintainer: Dewey Dunnington dewey@fishandwhistle.net (ORCID) Authors: Nic Crane thisisnic@gmail.com Jonathan Keane jkeane@gmail.com","code":""},{"path":"/reference/substrait-type.html","id":null,"dir":"Reference","previous_headings":"","what":"Substrait types — substrait-type","title":"Substrait types — substrait-type","text":"Substrait types","code":""},{"path":"/reference/substrait-type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substrait types — substrait-type","text":"","code":"substrait_boolean()  substrait_i8()  substrait_i16()  substrait_i32()  substrait_i64()  substrait_fp32()  substrait_fp64()  substrait_string()  substrait_binary()  substrait_timestamp()  substrait_timestamp_tz()  substrait_date()  substrait_time()  substrait_interval_year()  substrait_interval_day()  substrait_uuid()"},{"path":"/reference/substrait-type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substrait types — substrait-type","text":"substrait.Type proto object","code":""},{"path":"/reference/substrait-type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Substrait types — substrait-type","text":"","code":"substrait_boolean() #> message of type 'substrait.Type' with 1 field set #> bool_ { #>   nullability: NULLABILITY_NULLABLE #> } substrait_i32() #> message of type 'substrait.Type' with 1 field set #> i32 { #>   nullability: NULLABILITY_NULLABLE #> } substrait_fp64() #> message of type 'substrait.Type' with 1 field set #> fp64 { #>   nullability: NULLABILITY_NULLABLE #> } substrait_string() #> message of type 'substrait.Type' with 1 field set #> string { #>   nullability: NULLABILITY_NULLABLE #> }"},{"path":"/reference/substrait_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate — substrait_aggregate","title":"Aggregate — substrait_aggregate","text":"Aggregate","code":""},{"path":"/reference/substrait_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate — substrait_aggregate","text":"","code":"substrait_aggregate(.compiler, ...)  substrait_group_by(.compiler, ...)  substrait_ungroup(.compiler)"},{"path":"/reference/substrait_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate — substrait_aggregate","text":".compiler substrait_compiler() object can coerced one ... substrait_aggregate(): named list expressions evaluated context aggregation. substrait_group_by(): list expressions used groupings aggregation.","code":""},{"path":"/reference/substrait_aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate — substrait_aggregate","text":"modified .compiler.","code":""},{"path":"/reference/substrait_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Translation utilities — substrait_call","title":"Translation utilities — substrait_call","text":"functions used translate R function calls Substrait expressions can passed consumer, compiled, evaluated . Use substrait_call() generate substrait.Expression.ScalarFunction based function name series arguments; use substrait_eval() translate R code using Substrait function translations possible; use substrait_eval_data() translate R code using Substrait function translations .data mask current_compiler().","code":""},{"path":"/reference/substrait_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translation utilities — substrait_call","text":"","code":"substrait_call(.fun, ..., .output_type = NULL, .options = NULL)  substrait_call_agg(   .fun,   ...,   .output_type = NULL,   .phase = 0L,   .invocation = 0L )  substrait_eval(expr)  substrait_eval_data(expr)"},{"path":"/reference/substrait_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translation utilities — substrait_call","text":".fun name substrait function string passed consumer. function registered compiler assigned new identifier already used. ... Function arguments. coerced substrait.Expression already. Translation functions take care handle R objects readily translate substrait types via as_substrait(x, \"substrait.Expression\") passing substrait_call() substrait_call_agg(). .output_type output type call. future may built compiler since theory compiler able predict . .options optional list substrait.FunctionOption messages associate call. .phase Describes input type data describing portion operation required .invocation Whether function uses distinct values aggregation calculation expr expression evaluate translations defined current compiler. can use define translations use translations readable way. can use tidy evaluation within expr, including unquoting (!!), .data$some_column, access column explicitly, .fns$some_function() access translation explicitly.","code":""},{"path":"/reference/substrait_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translation utilities — substrait_call","text":"functions return object can coerced substrait.Expression via as_substrait(x, \"substrait.Expression\").","code":""},{"path":[]},{"path":"/reference/substrait_call.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translation utilities — substrait_call","text":"","code":"# create a compiler compiler <- substrait_compiler(data.frame(a = 1, b = 2))  # usually functions are defined in internal package code, # but you can also define them for testing like this: compiler$.fns$sqrt <- function(x) {   substrait_call(\"sqrt\", x, .output_type = substrait_fp64()) }  # substrait_eval() does not have access to column names try(with_compiler(compiler, substrait_eval(b))) #> Error in rlang::eval_tidy(expr_quo, data = if (is.null(compiler)) NULL else compiler$eval_mask(.data)) :  #>   object 'b' not found  # ..but does have access to functions with_compiler(compiler, substrait_eval(sqrt(4))) #> message of type 'substrait.Expression.ScalarFunction' with 3 fields set #> function_reference: 2 #> output_type { #>   fp64 { #>     nullability: NULLABILITY_NULLABLE #>   } #> } #> arguments { #>   value { #>     literal { #>       fp64: 4 #>     } #>   } #> }  # use substrait_eval_data() to do a more direct test of a translation with_compiler(compiler, substrait_eval_data(sqrt(b))) #> message of type 'substrait.Expression.ScalarFunction' with 3 fields set #> function_reference: 2 #> output_type { #>   fp64 { #>     nullability: NULLABILITY_NULLABLE #>   } #> } #> arguments { #>   value { #>     selection { #>       direct_reference { #>         struct_field { #>           field: 1 #>         } #>       } #>       root_reference { #>       } #>     } #>   } #> }"},{"path":"/reference/substrait_compiler.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a Substrait Compiler — substrait_compiler","title":"Initialize a Substrait Compiler — substrait_compiler","text":"Creates SubstraitCompiler instance initialized object (e.g., data.frame()).","code":""},{"path":"/reference/substrait_compiler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a Substrait Compiler — substrait_compiler","text":"","code":"substrait_compiler(object, ...)  # S3 method for SubstraitCompiler substrait_compiler(object, ...)  # S3 method for default substrait_compiler(object, ...)"},{"path":"/reference/substrait_compiler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a Substrait Compiler — substrait_compiler","text":"object table-like object create compiler. ... Passed SubstraitCompiler creating new compiler","code":""},{"path":"/reference/substrait_compiler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a Substrait Compiler — substrait_compiler","text":"object class 'substrait_compiler'","code":""},{"path":"/reference/substrait_compiler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a Substrait Compiler — substrait_compiler","text":"","code":"substrait_compiler(data.frame(col1 = 1, col2 = \"one\")) #> <SubstraitCompiler> #>   Public: #>     .data: list #>     .fns: list #>     add_relation: function (object, ...)  #>     clone: function (deep = FALSE)  #>     eval_mask: function (.data = TRUE)  #>     evaluate: function (...)  #>     extension_uri_anchor: function (name)  #>     function_extension: function (id)  #>     function_id: function (name, arg_types)  #>     groups: NULL #>     initialize: function (object = NULL, ...)  #>     named_table: function (name)  #>     named_table_list: function ()  #>     next_id: function ()  #>     plan: function ()  #>     rel: substrait_Rel, substrait_proto_message, substrait_proto #>     resolve_function: function (name, args, template, output_type = NULL, options = NULL)  #>     schema: substrait_NamedStruct, substrait_proto_message, substrait_proto #>     validate: function ()  #>   Private: #>     extension_uri: list #>     function_extensions: list #>     function_extensions_key: list #>     id_counter: 2 #>     named_tables: list #>     type_extensions: list #>     type_variations: list"},{"path":"/reference/substrait_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create 'Substrait' message objects — substrait_create","title":"Create 'Substrait' message objects — substrait_create","text":"'Substrait' system objects made series nested types serializable Protocol Buffer binary format. can create objects using substrait_create(), namespace-style constructor object substrait. Convert existing object Substrait message using as_substrait(), convert existing object back R object using from_substrait().","code":""},{"path":"/reference/substrait_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create 'Substrait' message objects — substrait_create","text":"","code":"substrait_create(.qualified_name, ...)  substrait"},{"path":"/reference/substrait_create.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Create 'Substrait' message objects — substrait_create","text":"object class list length 39.","code":""},{"path":"/reference/substrait_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create 'Substrait' message objects — substrait_create","text":".qualified_name fully qualified name message type enum (e.g., \"substrait.Type.Boolean\") ... Arguments passed constructor. rlang-style tidy dots supported.","code":""},{"path":"/reference/substrait_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create 'Substrait' message objects — substrait_create","text":"object class \"substrait_proto\".","code":""},{"path":"/reference/substrait_create.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create 'Substrait' message objects — substrait_create","text":"hood, substrait objects raw() vectors containing underlying binary protocol buffer serialization. may case future, done separate protocol buffer reader/writer (currently RProtoBuf) object conversion facilitate getting started conversion code.","code":""},{"path":"/reference/substrait_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create 'Substrait' message objects — substrait_create","text":"","code":"substrait_create(\"substrait.Type.Boolean\", type_variation_reference = 1) #> message of type 'substrait.Type.Boolean' with 1 field set #> type_variation_reference: 1 substrait$Type$Boolean$create(type_variation_reference = 1) #> message of type 'substrait.Type.Boolean' with 1 field set #> type_variation_reference: 1"},{"path":"/reference/substrait_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Append a Substrait Project Relation — substrait_filter","title":"Append a Substrait Project Relation — substrait_filter","text":"Append Substrait Project Relation","code":""},{"path":"/reference/substrait_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append a Substrait Project Relation — substrait_filter","text":"","code":"substrait_filter(.compiler, ...)"},{"path":"/reference/substrait_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append a Substrait Project Relation — substrait_filter","text":".compiler substrait_compiler() object can coerced one ... Filter expressions","code":""},{"path":"/reference/substrait_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append a Substrait Project Relation — substrait_filter","text":"modified .compiler","code":""},{"path":"/reference/substrait_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append a Substrait Project Relation — substrait_filter","text":"","code":"substrait_filter(   duckdb_substrait_compiler(data.frame(a = 1, b = \"one\")),   a > 0 ) #> <DuckDBSubstraitCompiler> #>   Inherits from: <SubstraitCompiler> #>   Public: #>     .data: list #>     .fns: environment #>     add_relation: function (object, ...)  #>     clone: function (deep = FALSE)  #>     eval_mask: function (.data = TRUE)  #>     evaluate: function (...)  #>     extension_uri_anchor: function (name)  #>     function_extension: function (id)  #>     function_id: function (name, arg_types)  #>     groups: NULL #>     initialize: function (...)  #>     named_table: function (name)  #>     named_table_list: function ()  #>     next_id: function ()  #>     plan: function ()  #>     rel: substrait_Rel, substrait_proto_message, substrait_proto #>     resolve_function: function (name, args, template, output_type = NULL, options = NULL)  #>     schema: substrait_NamedStruct, substrait_proto_message, substrait_proto #>     validate: function ()  #>   Private: #>     extension_uri: list #>     function_extensions: list #>     function_extensions_key: list #>     id_counter: 3 #>     named_tables: list #>     type_extensions: list #>     type_variations: list"},{"path":"/reference/substrait_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Append a Substrait Project Relation — substrait_project","title":"Append a Substrait Project Relation — substrait_project","text":"Append Substrait Project Relation","code":""},{"path":"/reference/substrait_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append a Substrait Project Relation — substrait_project","text":"","code":"substrait_project(.compiler, ..., .drop_columns = character())  substrait_select(.compiler, ...)"},{"path":"/reference/substrait_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append a Substrait Project Relation — substrait_project","text":".compiler substrait_compiler() object can coerced one ... Expressions .drop_columns character vector columns explicitly drop adding expressions specified ....","code":""},{"path":"/reference/substrait_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append a Substrait Project Relation — substrait_project","text":"modified .compiler","code":""},{"path":"/reference/substrait_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append a Substrait Project Relation — substrait_project","text":"","code":"substrait_select(   duckdb_substrait_compiler(data.frame(a = 1, b = \"one\")),   c = a + 1 ) #> <DuckDBSubstraitCompiler> #>   Inherits from: <SubstraitCompiler> #>   Public: #>     .data: list #>     .fns: environment #>     add_relation: function (object, ...)  #>     clone: function (deep = FALSE)  #>     eval_mask: function (.data = TRUE)  #>     evaluate: function (...)  #>     extension_uri_anchor: function (name)  #>     function_extension: function (id)  #>     function_id: function (name, arg_types)  #>     groups: NULL #>     initialize: function (...)  #>     named_table: function (name)  #>     named_table_list: function ()  #>     next_id: function ()  #>     plan: function ()  #>     rel: substrait_Rel, substrait_proto_message, substrait_proto #>     resolve_function: function (name, args, template, output_type = NULL, options = NULL)  #>     schema: substrait_NamedStruct, substrait_proto_message, substrait_proto #>     validate: function ()  #>   Private: #>     extension_uri: list #>     function_extensions: list #>     function_extensions_key: list #>     id_counter: 3 #>     named_tables: list #>     type_extensions: list #>     type_variations: list"},{"path":"/reference/substrait_sort.html","id":null,"dir":"Reference","previous_headings":"","what":"Append a Substrait Project Relation — substrait_sort","title":"Append a Substrait Project Relation — substrait_sort","text":"Append Substrait Project Relation","code":""},{"path":"/reference/substrait_sort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append a Substrait Project Relation — substrait_sort","text":"","code":"substrait_sort(.compiler, ...)  substrait_sort_field(expr, direction = \"SORT_DIRECTION_ASC_NULLS_LAST\")"},{"path":"/reference/substrait_sort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append a Substrait Project Relation — substrait_sort","text":".compiler substrait_compiler() object can coerced one ... Expressions evaluate Expression SortField expr expression evaluates Expression direction SortField.SortDirection","code":""},{"path":"/reference/substrait_sort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append a Substrait Project Relation — substrait_sort","text":"modified .compiler","code":""},{"path":"/reference/substrait_sort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append a Substrait Project Relation — substrait_sort","text":"","code":"substrait_sort(   duckdb_substrait_compiler(data.frame(a = 1, b = \"one\")),   a,   substrait_sort_field(b, \"SORT_DIRECTION_DESC_NULLS_LAST\") ) #> <DuckDBSubstraitCompiler> #>   Inherits from: <SubstraitCompiler> #>   Public: #>     .data: list #>     .fns: environment #>     add_relation: function (object, ...)  #>     clone: function (deep = FALSE)  #>     eval_mask: function (.data = TRUE)  #>     evaluate: function (...)  #>     extension_uri_anchor: function (name)  #>     function_extension: function (id)  #>     function_id: function (name, arg_types)  #>     groups: NULL #>     initialize: function (...)  #>     named_table: function (name)  #>     named_table_list: function ()  #>     next_id: function ()  #>     plan: function ()  #>     rel: substrait_Rel, substrait_proto_message, substrait_proto #>     resolve_function: function (name, args, template, output_type = NULL, options = NULL)  #>     schema: substrait_NamedStruct, substrait_proto_message, substrait_proto #>     validate: function ()  #>   Private: #>     extension_uri: list #>     function_extensions: list #>     function_extensions_key: list #>     id_counter: 2 #>     named_tables: list #>     type_extensions: list #>     type_variations: list"}]
